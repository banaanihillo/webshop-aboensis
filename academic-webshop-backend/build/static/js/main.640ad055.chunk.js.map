{"version":3,"sources":["services/userService.js","services/itemService.js","components/LandingPage.js","components/ItemList.js","components/SignUp.js","services/loginService.js","components/LogIn.js","components/AddItemForm.js","components/MyItems.js","services/electronicMailService.js","components/Cart.js","components/Search.js","components/Account.js","components/EditItemForm.js","components/Notification.js","assets/cart-96x96.svg","App.js","reportWebVitals.js","index.js"],"names":["address","createNewUser","newUser","a","axios","post","response","data","getUser","userid","get","makeItemTransaction","items","patch","populateUsers","users","getPopulatedUsers","userNames","responseOne","responseTwo","responseThree","1","2","3","postPopulatedItems","changePassword","id","newPassword","put","token","setToken","newToken","getItemsForSale","createNewItem","newItem","config","headers","Authorization","populateItems","editItem","newProperties","LandingPage","props","termsAccepted","acceptTerms","itemsForSale","setLoggedIn","setItemsForSale","useState","databasePopulated","setDatabasePopulated","commitPopulation","window","localStorage","removeItem","userName","_id","usersToPopulate","forEach","value","index","password","electronicMail","sellers","itemsToPopulate","i","j","push","name","price","forSale","seller","date","Date","className","length","onClick","to","ItemList","setItemsInCart","loggedIn","itemsInCart","filteredItems","showNotification","myItemsExcluded","setMyItemsExcluded","activePage","setActivePage","currentPageItems","setCurrentPageItems","useEffect","then","responseData","filter","item","sort","item1","item2","parse","lastItemIndex","firstItemIndex","pageNumbers","slice","handlePageChange","event","target","map","description","addedItem","find","concat","Math","ceil","pageNumber","generatePageNumbers","SignUp","history","useHistory","setElectronicMail","setUserName","setPassword","passwordAgain","setPasswordAgain","htmlFor","type","required","onChange","autoComplete","preventDefault","logIn","logInCredentials","LogIn","handleSubmit","user","setItem","JSON","stringify","AddItemForm","toggleItemForm","setName","setPrice","setDescription","updatedItems","placeholder","min","max","Number","rows","MyItems","myItems","setMyItems","itemFormOpen","itemsSold","itemsBought","itemListings","key","Object","entries","getItems","sendElectronicMail","itemNames","requestBody","Cart","checkAvailability","refetchedItems","inStock","every","itemInCart","itemFound","some","refetchedItem","unavailableItem","unavailableItemsRemoved","recheckedItem","checkPricing","itemsHaveChanged","cartItem","itemToCompare","itemForSale","changedCartItem","changedItems","handleItemTransaction","mailSent","mailPreview","filteredCart","removeFromCart","reduce","sum","summand","Search","setFilteredItems","toLowerCase","includes","Account","oldPassword","setOldPassword","setNewPassword","newPasswordAgain","setNewPasswordAgain","submitNewPassword","hidden","readOnly","EditItemForm","individualItem","useParams","newPrice","setNewPrice","modifiedItem","disabled","Notification","message","errorMessage","App","setMessage","setErrorMessage","currentlyLoggedIn","getItem","itemMatch","useRouteMatch","params","notification","typeOfNotification","timeoutDuration","console","log","setTimeout","ConditionalLinks","src","cart","alt","style","height","width","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.640ad055.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst address = \"/backend/users\"\r\n\r\nconst createNewUser = async (newUser) => {\r\n\r\n    const response = await axios.post(address, newUser)\r\n    \r\n    return response.data\r\n}\r\n\r\nconst getUser = async (userid) => {\r\n    const response = await axios.get(`${address}/${userid}`)\r\n    return response.data\r\n}\r\n\r\nconst makeItemTransaction = async (userid, items) => {\r\n\r\n    const response = await axios.patch(`${address}/${userid}`, items)\r\n    \r\n    return response.data\r\n}\r\n\r\nconst populateUsers = async (users) => {\r\n    const response = await axios.post(`${address}/populate`, users)\r\n    return response.data\r\n}\r\n\r\nconst getPopulatedUsers = async (userNames) => {\r\n    const responseOne = await axios.get(\r\n        `${address}/username/${userNames[0]}`\r\n    )\r\n    const responseTwo = await axios.get(\r\n        `${address}/username/${userNames[1]}`\r\n    )\r\n    const responseThree = await axios.get(\r\n        `${address}/username/${userNames[2]}`\r\n    )\r\n    const response = {\r\n        1: responseOne.data[0],\r\n        2: responseTwo.data[0],\r\n        3: responseThree.data[0]\r\n    }\r\n    return response\r\n}\r\n\r\nconst postPopulatedItems = async (items) => {\r\n    const response = await axios.post(\r\n        `${address}/populated-items`,\r\n        items\r\n    )\r\n    return response.data\r\n}\r\n\r\nconst changePassword = async (id, newPassword) => {\r\n    const response = await axios.put(\r\n        `${address}/${id}`,\r\n        newPassword\r\n    )\r\n    return response.data\r\n}\r\n\r\nexport {\r\n    createNewUser,\r\n    getUser,\r\n    makeItemTransaction,\r\n    populateUsers,\r\n    getPopulatedUsers,\r\n    postPopulatedItems,\r\n    changePassword\r\n}\r\n","import axios from \"axios\"\r\nconst address = \"/backend/items\"\r\n\r\nlet token = \"\"\r\nconst setToken = (newToken) => {\r\n    token = `Bearer ${newToken}`\r\n}\r\n\r\nconst getItemsForSale = async () => {\r\n    const response = await axios.get(`${address}/for-sale`)\r\n    return response.data\r\n}\r\n\r\nconst createNewItem = async (newItem) => {\r\n    const config = {\r\n        headers: {\r\n            Authorization: token\r\n        }\r\n    }\r\n    const response = await axios.post(address, newItem, config)\r\n    return response.data\r\n}\r\n\r\nconst getItem = async (itemid) => {\r\n    const response = await axios.get(`${address}/${itemid}`)\r\n    return response.data\r\n}\r\n\r\nconst populateItems = async (items) => {\r\n    const response = await axios.post(`${address}/populate`, items)\r\n    return response.data\r\n}\r\n\r\nconst editItem = async (id, newProperties) => {\r\n    const response = await axios.patch(\r\n        `${address}/${id}`,\r\n        newProperties\r\n    )\r\n    return response.data\r\n}\r\n\r\nexport {\r\n    getItemsForSale,\r\n    createNewItem,\r\n    getItem,\r\n    setToken,\r\n    populateItems,\r\n    editItem\r\n}\r\n","import React, {useState} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {\r\n    populateUsers, getPopulatedUsers, postPopulatedItems\r\n} from \"../services/userService\"\r\nimport {\r\n    populateItems, getItemsForSale\r\n} from \"../services/itemService\"\r\n\r\nconst LandingPage = (props) => {\r\n    const {\r\n        termsAccepted,\r\n        acceptTerms,\r\n        itemsForSale,\r\n        setLoggedIn,\r\n        setToken,\r\n        setItemsForSale\r\n    } = props\r\n\r\n    const [databasePopulated, setDatabasePopulated] = useState(false)\r\n\r\n    const commitPopulation = async () => {\r\n        window.localStorage.removeItem(\r\n            \"currentlyLoggedIn\"\r\n        )\r\n        setLoggedIn({\r\n            userName: null,\r\n            _id: null\r\n        })\r\n        setToken(null)\r\n        let usersToPopulate = [1, 2, 3, 4, 5, 6]\r\n        usersToPopulate.forEach((value, index) => \r\n            usersToPopulate[index] = {\r\n                userName: `testuser${value}`,\r\n                password: `pass${value}`,\r\n                electronicMail: `testuser${value}@shop.aa`\r\n            }\r\n        )\r\n        await populateUsers(usersToPopulate)\r\n\r\n        const sellers = await getPopulatedUsers([\r\n            \"testuser1\", \"testuser2\", \"testuser3\"\r\n        ])\r\n        let itemsToPopulate = []\r\n        for (let i = 1; i <= 3; i++) {\r\n            for (let j = 1; j <= 10; j++) {\r\n                itemsToPopulate.push({\r\n                    name: `seller${i}-item${j}`,\r\n                    price: i + j,\r\n                    forSale: true,\r\n                    seller: {\r\n                        userName: `testuser${i}`,\r\n                        _id: sellers[i]._id\r\n                    },\r\n                    date: new Date()\r\n                })\r\n            }\r\n        }\r\n        await populateItems(itemsToPopulate)\r\n        \r\n        const itemsForSale = await getItemsForSale()\r\n        await postPopulatedItems(itemsForSale)\r\n        setDatabasePopulated(true)\r\n        setItemsForSale(itemsForSale)\r\n    }\r\n\r\n    return (\r\n        <div className = \"landing-page-container\">\r\n            <section>\r\n                Items currently for sale: {itemsForSale.length}\r\n            </section>\r\n            {databasePopulated\r\n                ? <section> Database successfully populated. </section>\r\n                : <section>\r\n                    Click on the button below to populate the database\r\n                    <br />\r\n                    <button onClick = {() => commitPopulation()}>\r\n                        Populate\r\n                    </button>\r\n                </section>\r\n            }\r\n            <section>\r\n                By clicking on the button below,\r\n                you agree to our\r\n                <em> intentionally ambiguous </em>\r\n                terms and conditions.\r\n                <br />\r\n                <button onClick = {() => {acceptTerms(true)}}>\r\n                    Agree\r\n                </button>\r\n                {!termsAccepted\r\n                    ?\r\n                        <div>\r\n                            You must accept the terms and conditions.\r\n                        </div>\r\n                    :\r\n                        <div>\r\n                            <Link to=\"/shop\">\r\n                                Items for sale\r\n                            </Link>\r\n                        </div>\r\n                }\r\n            </section>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LandingPage\r\n","import React, {useEffect, useState} from \"react\"\r\nimport {Link} from \"react-router-dom\"\r\nimport {getItemsForSale} from \"../services/itemService\"\r\n\r\nconst ItemList = (props) => {\r\n    const {\r\n        termsAccepted,\r\n        acceptTerms,\r\n        setItemsInCart,\r\n        loggedIn,\r\n        itemsInCart,\r\n        filteredItems,\r\n        showNotification\r\n    } = props\r\n\r\n    const [myItemsExcluded, setMyItemsExcluded] = useState([])\r\n    const [activePage, setActivePage] = useState(1)\r\n    const [currentPageItems, setCurrentPageItems] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (filteredItems) {\r\n            setMyItemsExcluded(filteredItems)\r\n        } else {\r\n            getItemsForSale()\r\n                .then(responseData => {\r\n                    const myItemsExcluded = responseData\r\n                        .filter(item => {\r\n                            return (\r\n                                item.seller !== loggedIn._id\r\n                            )\r\n                        })\r\n                    myItemsExcluded.sort((item1, item2) => {  \r\n                        return (\r\n                            Date.parse(item2.date)\r\n                            - Date.parse(item1.date)\r\n                        )\r\n                    })\r\n                    setMyItemsExcluded(myItemsExcluded)\r\n                })\r\n        }\r\n    },\r\n    [loggedIn, filteredItems])\r\n    \r\n    const itemsPerPage = 4\r\n    const lastItemIndex = activePage * itemsPerPage\r\n    const firstItemIndex = lastItemIndex - itemsPerPage\r\n    let pageNumbers = []\r\n\r\n    useEffect(() => {\r\n        if (myItemsExcluded.length > 0) {\r\n            setCurrentPageItems(myItemsExcluded.slice(\r\n                firstItemIndex, lastItemIndex\r\n            ))\r\n        }\r\n    },\r\n    [myItemsExcluded, firstItemIndex, lastItemIndex])\r\n\r\n    const handlePageChange = (event) => {\r\n        setActivePage(event.target.value)\r\n    }\r\n\r\n    const generatePageNumbers = () => {\r\n        for (\r\n            let i = 1;\r\n            i <= Math.ceil(myItemsExcluded.length / itemsPerPage);\r\n            i++\r\n        ) {\r\n            pageNumbers.push(i)\r\n        }\r\n        return (\r\n            <ul className = \"pagination\">\r\n                {pageNumbers.map(pageNumber => {\r\n                    return <li\r\n                        key = {pageNumber}\r\n                        value = {pageNumber}\r\n                        onClick = {handlePageChange}\r\n                    >\r\n                        {pageNumber}\r\n                    </li>\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const addToCart = (addedItem) => {\r\n        const alreadyInCart = itemsInCart.find(item => {\r\n            return (item._id === addedItem._id)\r\n        })\r\n        if (alreadyInCart) {\r\n            showNotification(\r\n                \"Already in your cart.\",\r\n                \"errorMessage\",\r\n                2000\r\n            )\r\n        } else {\r\n            setItemsInCart(itemsInCart.concat(addedItem))   \r\n        }\r\n    }\r\n\r\n    if (!termsAccepted) {\r\n        return (\r\n            <div>\r\n                Looks like you have not accepted the legal agreement.\r\n                <br />\r\n                By clicking below,\r\n                you agree to the terms and conditions.\r\n                <br />\r\n                <button onClick = {() => {acceptTerms(true)}}>\r\n                    Agree\r\n                </button>\r\n            </div>\r\n        )\r\n    } else {\r\n        if (myItemsExcluded.length < 1) {\r\n            return (\r\n                <div>\r\n                    Nothing to see here.\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {loggedIn._id\r\n                        ? <span> Logged in: {loggedIn.userName} </span>\r\n                        : <span>\r\n                            You are not logged in. <br />\r\n                            Sales and purchases are reserved\r\n                            for registered users only. <br />\r\n                            <Link to=\"/login\"> Log in here </Link>\r\n                        </span>\r\n                    }\r\n                    <ul className = \"item-list-container\">\r\n                        {currentPageItems.map(item => {\r\n                            return <li key = {item._id}>\r\n                                Item: {item.name} <br />\r\n                                Price: {item.price} <br />\r\n                                {item.description} <br />\r\n                                Posted on {item.date} <br />\r\n                                {!loggedIn._id\r\n                                    ? null\r\n                                    : <button onClick = {() => {\r\n                                        addToCart(item)\r\n                                    }}>\r\n                                        Add to cart\r\n                                    </button>\r\n                                }\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                    {generatePageNumbers()}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default ItemList\r\n","import React, {useState} from \"react\"\r\nimport {createNewUser} from \"../services/userService\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nconst SignUp = (props) => {\r\n    const {showNotification} = props\r\n    const history = useHistory()\r\n    const [electronicMail, setElectronicMail] = useState(\"\")\r\n    const [userName, setUserName] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [passwordAgain, setPasswordAgain] = useState(\"\")\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if (password !== passwordAgain) {\r\n            showNotification(\r\n                \"The passwords inputs do not match.\",\r\n                \"errorMessage\"\r\n            )\r\n        } else {\r\n            createNewUser({\r\n                electronicMail,\r\n                userName,\r\n                password\r\n            })\r\n            history.push(\"/login\")\r\n            showNotification(\r\n                `You have successfully signed up.\r\n                A nonexistent confirmation mail has been sent.\r\n                Make sure you check that out, or don't.`\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h2> Sign up </h2>\r\n            <form className = \"signup-form\">\r\n                <label htmlFor = \"electronicMailInput\">\r\n                    Electronic mail\r\n                </label>\r\n                <input\r\n                    type = \"email\"\r\n                    id = \"electronicMailInput\"\r\n                    value = {electronicMail}\r\n                    required\r\n                    onChange = {({target}) =>\r\n                        setElectronicMail(target.value)\r\n                    }\r\n                />\r\n                <br />\r\n\r\n                <label htmlFor = \"userNameInput\"> User name </label>\r\n                <input\r\n                    type = \"text\"\r\n                    id = \"userNameInput\"\r\n                    autoComplete = \"username\"\r\n                    value = {userName}\r\n                    required\r\n                    onChange = {({target}) =>\r\n                        setUserName(target.value)\r\n                    }\r\n                />\r\n                <br />\r\n\r\n                <label htmlFor = \"passwordInput\"> Password </label>\r\n                <input\r\n                    type = \"password\"\r\n                    id = \"passwordInput\"\r\n                    autoComplete = \"new-password\"\r\n                    value = {password}\r\n                    required\r\n                    onChange = {({target}) =>\r\n                        setPassword(target.value)\r\n                    }\r\n                />\r\n                <br />\r\n\r\n                <label htmlFor = \"passwordInputAgain\">\r\n                    Password again\r\n                </label>\r\n                <input\r\n                    type = \"password\"\r\n                    id = \"passwordInputAgain\"\r\n                    autoComplete = \"new-password\"\r\n                    value = {passwordAgain}\r\n                    required\r\n                    onChange = {({target}) =>\r\n                        setPasswordAgain(target.value)\r\n                    }\r\n                />\r\n                <br />\r\n\r\n                <button\r\n                    type = \"submit\"\r\n                    onClick = {handleSubmit}\r\n                >\r\n                    Sign up\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SignUp\r\n","import axios from \"axios\"\r\nconst address = \"/backend/log-in\"\r\n\r\nconst logIn = async (logInCredentials) => {\r\n    const response = await axios.post(address, logInCredentials)\r\n    //so this response data includes the token,\r\n    //and it should be stored somewhere to keep the user logged in\r\n    return response.data\r\n}\r\n\r\nexport {\r\n    logIn\r\n}\r\n","import React, {useState} from \"react\"\r\nimport {logIn} from \"../services/loginService\"\r\nimport {setToken} from \"../services/itemService\"\r\nimport {useHistory} from \"react-router-dom\"\r\n\r\nconst LogIn = (props) => {\r\n    const {setLoggedIn, showNotification} = props\r\n    const history = useHistory()\r\n    const [userName, setUserName] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        try {\r\n            const user = await logIn({\r\n                userName,\r\n                password\r\n            })\r\n            if (!user) {\r\n                showNotification(\r\n                    `The user ${userName} could not be found.`,\r\n                    \"errorMessage\"\r\n                )\r\n            } else {\r\n                setLoggedIn(user)\r\n                setToken(user.token)\r\n                window.localStorage.setItem(\r\n                    \"currentlyLoggedIn\",\r\n                    JSON.stringify(user)\r\n                )\r\n                history.push(\"/\")\r\n                showNotification(`Welcome, ${user.userName}.`)\r\n            }\r\n        } catch (error) {\r\n            showNotification(\r\n                \"Incorrect log-in credentials.\",\r\n                \"errorMessage\"\r\n            )\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <h2> Log in </h2>\r\n            <form className = \"login-form\">\r\n                <label htmlFor = \"logInUserName\"> User name </label>\r\n                <input\r\n                    type = \"text\"\r\n                    id = \"logInUserName\"\r\n                    value = {userName}\r\n                    required\r\n                    onChange = {({target}) => {\r\n                        setUserName(target.value)\r\n                    }}\r\n                />\r\n                <br />\r\n                <label htmlFor = \"logInPassword\"> Password </label>\r\n                <input\r\n                    type = \"password\"\r\n                    id = \"logInPassword\"\r\n                    autoComplete = \"on\"\r\n                    value = {password}\r\n                    required\r\n                    onChange = {({target}) => {\r\n                        setPassword(target.value)\r\n                    }}\r\n                />\r\n                <br />\r\n\r\n                <button\r\n                    onClick = {handleSubmit}\r\n                    type = \"submit\"\r\n                >\r\n                    Log in\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogIn\r\n","import React, {useState} from \"react\"\r\nimport {createNewItem} from \"../services/itemService\"\r\n\r\nconst AddItemForm = (props) => {\r\n    const {\r\n        toggleItemForm,\r\n        itemsForSale,\r\n        setItemsForSale,\r\n        showNotification\r\n    } = props\r\n    const [name, setName] = useState(\"\")\r\n    const [price, setPrice] = useState(0)\r\n    const [description, setDescription] = useState(\"\")\r\n    \r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const newItem = {\r\n            name: name,\r\n            price: price,\r\n            description: description\r\n        }\r\n        const responseData = await createNewItem(newItem)\r\n        const updatedItems = itemsForSale.concat(responseData)\r\n        setItemsForSale(updatedItems)\r\n        showNotification(\r\n            `Successfully added ${newItem.name}.`\r\n        )\r\n        toggleItemForm(false)\r\n    }\r\n\r\n    return (\r\n        <form className = \"add-item-form\">\r\n                    <label htmlFor = \"newItemName\"> Name: </label>\r\n                    <input\r\n                        type = \"text\"\r\n                        id = \"newItemName\"\r\n                        value = {name}\r\n                        required\r\n                        placeholder = \"Item name\"\r\n                        onChange = {({target}) => {\r\n                            setName(target.value)\r\n                        }}\r\n                    />\r\n\r\n                    <br />\r\n                    <label htmlFor = \"newItemPrice\"> Price: </label>\r\n                    <input\r\n                        type = \"number\"\r\n                        min = {1}\r\n                        max = {9000}\r\n                        id = \"newItemPrice\"\r\n                        value = {price}\r\n                        required\r\n                        onChange = {({target}) => {\r\n                            setPrice(Number(target.value))\r\n                        }}\r\n                    />\r\n                    \r\n                    <br />\r\n                    <label htmlFor = \"newItemDescription\">\r\n                        Description:\r\n                    </label>\r\n                    <textarea\r\n                        rows = {5}\r\n                        id = \"newItemDescription\"\r\n                        value = {description}\r\n                        placeholder = \"Optional description\"\r\n                        onChange = {({target}) => {\r\n                            setDescription(target.value)\r\n                        }}\r\n                    />\r\n                    \r\n                    <br />\r\n                    <button\r\n                        type = \"submit\"\r\n                        onClick = {handleSubmit}\r\n                    >\r\n                        Submit\r\n                    </button>\r\n                    <br />\r\n                    <button\r\n                        type = \"button\"\r\n                        onClick = {() => toggleItemForm(false)}\r\n                        className = \"button-cancel\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                </form>\r\n    )\r\n}\r\n\r\nexport default AddItemForm\r\n","import React, {useEffect, useState} from \"react\"\r\nimport {getUser} from \"../services/userService\"\r\nimport AddItemForm from \"./AddItemForm\"\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst MyItems = (props) => {\r\n    const {\r\n        userid,\r\n        itemsForSale,\r\n        setItemsForSale,\r\n        showNotification\r\n    } = props\r\n\r\n    const [myItems, setMyItems] = useState({\r\n        \"Items for sale\": [\r\n\r\n        ],\r\n        \"Items sold\": [\r\n\r\n        ],\r\n        \"Items bought\": [\r\n\r\n        ]\r\n    })\r\n    const [itemFormOpen, toggleItemForm] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if (!userid) {\r\n            return \"No data to fetch yet\"\r\n        }\r\n        getUser(userid)\r\n            .then((responseData) => {\r\n                setMyItems({\r\n                    \"Items for sale\": responseData.itemsForSale,\r\n                    \"Items sold\": responseData.itemsSold,\r\n                    \"Items bought\": responseData.itemsBought\r\n                })\r\n            })\r\n    },\r\n    [userid, itemsForSale])\r\n\r\n    if (!userid) {\r\n        return (\r\n            <div> What are you doing here </div>\r\n        )\r\n    }\r\n\r\n    const getItems = () => {\r\n        let itemListings = []\r\n        for (const [key, value] of Object.entries(myItems)) {\r\n            itemListings.push(\r\n                <span key = {key}>\r\n                    <h2> {key} </h2>\r\n                    {value.map(item => {\r\n                        return <li key = {item._id}>\r\n                            Item: {item.name} <br />\r\n                            Price: {item.price} <br />\r\n                            {item.description} <br />\r\n                            {(key !== \"Items for sale\")\r\n                                ? null\r\n                                : <Link to={`/my-items/${item._id}`}>\r\n                                    Edit\r\n                                </Link>\r\n                            }\r\n                            \r\n                        </li>\r\n                    })}\r\n                </span>\r\n            )\r\n        }\r\n        return itemListings\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!itemFormOpen\r\n                ? <button onClick = {() => toggleItemForm(true)}>\r\n                    Add an item\r\n                </button>\r\n                : <AddItemForm\r\n                    toggleItemForm = {toggleItemForm}\r\n                    itemsForSale = {itemsForSale}\r\n                    setItemsForSale = {setItemsForSale}\r\n                    showNotification = {showNotification}\r\n                />\r\n            }\r\n            <ul className = \"my-items-container\">\r\n                {getItems()}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyItems\r\n","import axios from \"axios\"\r\nconst address = \"/backend/electronic-mail\"\r\n\r\nconst sendElectronicMail = async (loggedIn, itemNames) => {\r\n    const requestBody = {\r\n        loggedIn: loggedIn,\r\n        itemNames: itemNames\r\n    }\r\n    const response = await axios.post(address, requestBody)\r\n    \r\n    return response.data\r\n}\r\n\r\nexport {\r\n    sendElectronicMail\r\n}\r\n","import React, {useEffect} from \"react\"\r\nimport {makeItemTransaction} from \"../services/userService\"\r\nimport {getItemsForSale} from \"../services/itemService\"\r\nimport {sendElectronicMail} from \"../services/electronicMailService\"\r\n\r\nconst Cart = (props) => {\r\n    const {\r\n        itemsInCart,\r\n        setItemsInCart,\r\n        loggedIn,\r\n        setItemsForSale,\r\n        itemsForSale,\r\n        showNotification\r\n    } = props\r\n\r\n    useEffect(() => {\r\n        getItemsForSale()\r\n            .then(responseData => {\r\n                setItemsForSale(responseData)\r\n            })\r\n    },\r\n    [setItemsForSale])\r\n\r\n    const removeFromCart = (id) => {\r\n        const filteredCart = itemsInCart.filter(item => {\r\n            return (item._id !== id)\r\n        })\r\n        setItemsInCart(filteredCart)\r\n    }\r\n\r\n    const checkAvailability = async () => {\r\n        const refetchedItems = await getItemsForSale()\r\n\r\n        const inStock = itemsInCart.every(itemInCart => {\r\n            const itemFound = refetchedItems.some(refetchedItem => {\r\n                return (refetchedItem._id === itemInCart._id)\r\n            })\r\n            if (!itemFound) {\r\n                const unavailableItem = {\r\n                    ...itemInCart,\r\n                    forSale: false\r\n                }\r\n                const updatedItems = itemsInCart.map(item => {\r\n                    return (item._id === unavailableItem._id)\r\n                        ? unavailableItem\r\n                        : item\r\n                })\r\n                const unavailableItemsRemoved = updatedItems\r\n                    .filter(recheckedItem => {\r\n                        return (recheckedItem.forSale === true)\r\n                    })\r\n                setItemsInCart(unavailableItemsRemoved)\r\n            }\r\n            return itemFound\r\n        })\r\n        return inStock\r\n    }\r\n\r\n    const checkPricing = () => {\r\n        let itemsHaveChanged = false\r\n        const changedPrices = itemsInCart.some(cartItem => {\r\n            const itemToCompare = itemsForSale.find(itemForSale => {\r\n                return (itemForSale._id === cartItem._id)\r\n            })\r\n            if (itemToCompare.price !== cartItem.price) {\r\n                const changedCartItem = {\r\n                    ...cartItem,\r\n                    price: itemToCompare.price\r\n                }\r\n                const changedItems = itemsInCart.map(item => {\r\n                    return (item._id === itemToCompare._id)\r\n                        ? changedCartItem\r\n                        : item\r\n                })\r\n                setItemsInCart(changedItems)\r\n                itemsHaveChanged = true\r\n                return itemsHaveChanged\r\n            }\r\n            return itemsHaveChanged\r\n        })\r\n        return changedPrices\r\n    }\r\n\r\n    const handleItemTransaction = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const inStock = await checkAvailability()\r\n        if (!inStock) {\r\n\r\n            showNotification(\r\n                `An item in your cart is no longer in stock.\r\n                The item has now been removed from your cart.`,\r\n                \"errorMessage\"\r\n            )\r\n            return\r\n        }\r\n\r\n        const changedPrices = await checkPricing()\r\n        if (changedPrices) {\r\n\r\n            showNotification(\r\n                `The price of an item in your cart has changed.\r\n                The updated price is now shown in your cart.`,\r\n                \"errorMessage\"\r\n            )\r\n            return\r\n        }\r\n\r\n        await makeItemTransaction(\r\n            loggedIn._id,\r\n            itemsInCart\r\n        )\r\n        const responseData = await getItemsForSale()\r\n        setItemsForSale(responseData)\r\n\r\n        const itemNames = itemsInCart.map(item => item.name)\r\n        const mailSent = await sendElectronicMail(loggedIn, itemNames)\r\n        \r\n        setItemsInCart([])\r\n        showNotification(\r\n            `Transaction successful.\r\n            You may preview the confirmation mail at:\r\n            ${mailSent.mailPreview}`,\r\n            \"success\",\r\n            10000\r\n        )\r\n    }\r\n\r\n    if (itemsInCart.length < 1) {\r\n        return (\r\n            <div>\r\n                Your cart is empty.\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <ul className = \"cart-container\">\r\n                {itemsInCart.map(item => \r\n                    <li key = {item._id}>\r\n                        Item: {item.name}\r\n                        <br />\r\n                        Price: {item.price}\r\n                        <br />\r\n                        <button\r\n                            onClick = {() => removeFromCart(item._id)}\r\n                            className = \"button-cancel\"\r\n                        >\r\n                            Remove from cart\r\n                        </button>\r\n                    </li>\r\n                )}\r\n            </ul>\r\n            <h3> Total </h3>\r\n            {itemsInCart.map(item => item.price)\r\n                .reduce((sum, summand) => {\r\n                    return sum + summand\r\n                },\r\n                0\r\n            )} €\r\n            <br />\r\n            <p className = \"cart-buttons\">\r\n                <button\r\n                    type = \"submit\"\r\n                    onClick = {handleItemTransaction}\r\n                >\r\n                    Check out\r\n                </button>\r\n                <button\r\n                    type = \"button\"\r\n                    className = \"button-cancel\"\r\n                    onClick = {() => setItemsInCart([])}\r\n                >\r\n                    Remove all items\r\n                </button>\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n","import React from \"react\"\r\n\r\nconst Search = (props) => {\r\n    const {itemsForSale, setFilteredItems} = props\r\n\r\n    const handleSearch = (event) => {\r\n        const filteredItems = itemsForSale.filter(item =>\r\n            item.name.toLowerCase().includes(\r\n                event.target.value.toLowerCase()\r\n            )\r\n        )\r\n        filteredItems.sort((item1, item2) => {\r\n            return (Date.parse(item2.date) - Date.parse(item1.date))\r\n        })\r\n        setFilteredItems(filteredItems)\r\n    }\r\n\r\n    return (\r\n        <span className = \"App-header-search-bar\">\r\n            Search: \r\n            <input onChange = {handleSearch} />\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React, {useState} from \"react\"\r\nimport {changePassword} from \"../services/userService\"\r\n\r\nconst Account = (props) => {\r\n    const {userid, showNotification} = props\r\n    const [oldPassword, setOldPassword] = useState(\"\")\r\n    const [newPassword, setNewPassword] = useState(\"\")\r\n    const [newPasswordAgain, setNewPasswordAgain] = useState(\"\")\r\n\r\n    const submitNewPassword = async (event) => {\r\n        event.preventDefault()\r\n        //in a more realistic scenario:\r\n        //find the user in the database,\r\n        //compare their password hash to the oldPassword input,\r\n        //bcrypt.compare(old password, ...)\r\n        //and if it was not the same,\r\n        //throw an error;\r\n        //but no password shenanigans involved here,\r\n        //so i guess the old password really does not matter\r\n        \r\n        if (!newPassword) {\r\n            showNotification(\r\n                \"The password should not be empty.\",\r\n                \"errorMessage\"\r\n            )\r\n        } else {\r\n            if (newPassword === newPasswordAgain) {\r\n                await changePassword(userid, {\r\n                    password: newPassword\r\n                })\r\n                showNotification(\"Password successfully changed.\")\r\n            } else {\r\n                showNotification(\r\n                    \"The passwords do not match.\",\r\n                    \"errorMessage\"\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = \"my-account\">\r\n            <form className = \"my-account-form\">\r\n                <label htmlFor = \"hiddenUserName\"></label>\r\n                <input\r\n                    type = \"text\"\r\n                    hidden\r\n                    autoComplete = \"username\"\r\n                    readOnly\r\n                    id = \"hiddenUserName\"\r\n                />\r\n                <label htmlFor = \"oldPasswordInput\">\r\n                    Old password\r\n                </label>\r\n                <input\r\n                    type = \"password\"\r\n                    required\r\n                    autoComplete = \"current-password\"\r\n                    id = \"oldPasswordInput\"\r\n                    value = {oldPassword}\r\n                    onChange = {({target}) => {\r\n                        setOldPassword(target.value)\r\n                    }}\r\n                />\r\n                <br />\r\n                <label htmlFor = \"newPasswordInput\">\r\n                    New password\r\n                </label>\r\n                <input\r\n                    type = \"password\"\r\n                    required\r\n                    autoComplete = \"new-password\"\r\n                    id = \"newPasswordInput\"\r\n                    value = {newPassword}\r\n                    onChange = {({target}) => {\r\n                        setNewPassword(target.value)\r\n                    }}\r\n                />\r\n                <br />\r\n                <label htmlFor = \"newPasswordAgain\">\r\n                    New password again\r\n                </label>\r\n                <input\r\n                    type = \"password\"\r\n                    required\r\n                    autoComplete = \"new-password\"\r\n                    id = \"newPasswordAgain\"\r\n                    value = {newPasswordAgain}\r\n                    onChange = {({target}) => {\r\n                        setNewPasswordAgain(target.value)\r\n                    }}\r\n                />\r\n                <br />\r\n                <button\r\n                    type = \"submit\"\r\n                    onClick = {submitNewPassword}\r\n                >\r\n                    Submit\r\n                </button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Account\r\n","import React, {useState} from \"react\"\r\nimport {editItem} from \"../services/itemService\"\r\nimport {useHistory, useParams} from \"react-router-dom\"\r\n\r\nconst EditItemForm = (props) => {\r\n    const {\r\n        itemsForSale,\r\n        setItemsForSale,\r\n        individualItem,\r\n        showNotification\r\n    } = props\r\n    //\r\n    const {id} = useParams()\r\n    //\r\n    const [newPrice, setNewPrice] = useState(\r\n        individualItem.price\r\n    )\r\n    const history = useHistory()\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n        const modifiedItem = await editItem(\r\n            id,\r\n            {\r\n                price: newPrice\r\n            }\r\n        )\r\n        setItemsForSale(itemsForSale.filter(item =>\r\n            (item._id !== modifiedItem._id)\r\n                ? item\r\n                : modifiedItem\r\n        ))\r\n        history.push(\"/my-items\")\r\n        showNotification(\"Price successfully modified.\")\r\n    }\r\n\r\n    return (\r\n        <form className = \"edit-item-form\">\r\n            <label htmlFor = \"oldItemName\">\r\n                Name\r\n            </label>\r\n            <input\r\n                disabled\r\n                id = \"oldItemName\"\r\n                value = {individualItem.name}\r\n            />\r\n\r\n            <label htmlFor = \"editedPrice\">\r\n                New price\r\n            </label>\r\n            <input\r\n                type = \"number\"\r\n                id = \"editedPrice\"\r\n                min = {0}\r\n                max = {9000}\r\n                value = {newPrice}\r\n                onChange = {({target}) => {\r\n                    setNewPrice(target.value)\r\n                }}\r\n            />\r\n\r\n            <label htmlFor = \"oldItemDescription\">\r\n                Description\r\n            </label>\r\n            <input\r\n                disabled\r\n                id = \"oldItemDescription\"\r\n                value = {individualItem.description}\r\n            />\r\n            <button\r\n                type = \"submit\"\r\n                onClick = {handleSubmit}\r\n            >\r\n                Submit\r\n            </button>\r\n            <button\r\n                type = \"button\"\r\n                onClick = {() => history.push(\"/my-items\")}\r\n                className = \"button-cancel\"\r\n            >\r\n                Cancel\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default EditItemForm\r\n","import React from \"react\"\r\n\r\nconst Notification = (props) => {\r\n    const {message, errorMessage} = props\r\n\r\n    if (!message && !errorMessage) {\r\n        return (\r\n            <span className = \"notification-empty\"></span>\r\n        )\r\n    } else {\r\n        if (errorMessage) {\r\n            return (\r\n                <span className = \"notification-error-message\">\r\n                    {errorMessage}\r\n                </span>\r\n            )\r\n        } else {\r\n            return (\r\n                <span className = \"notification-message\">\r\n                    {message}\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Notification\r\n","export default __webpack_public_path__ + \"static/media/cart-96x96.b15320a4.svg\";","import React, {useState, useEffect} from \"react\"\r\nimport LandingPage from \"./components/LandingPage\"\r\nimport ItemList from \"./components/ItemList\"\r\nimport SignUp from \"./components/SignUp\"\r\nimport LogIn from \"./components/LogIn\"\r\nimport MyItems from \"./components/MyItems\"\r\nimport Cart from \"./components/Cart\"\r\nimport Search from \"./components/Search\"\r\nimport Account from \"./components/Account\"\r\nimport EditItemForm from \"./components/EditItemForm\"\r\nimport Notification from \"./components/Notification\"\r\nimport './App.css';\r\nimport {Switch, Route, Link, useRouteMatch} from \"react-router-dom\"\r\nimport {\r\n    getItemsForSale, setToken\r\n} from \"./services/itemService\"\r\nimport cart from \"./assets/cart-96x96.svg\"\r\n\r\nconst App = () => {\r\n    const [termsAccepted, acceptTerms] = useState(false)\r\n    const [itemsForSale, setItemsForSale] = useState([])\r\n    const [loggedIn, setLoggedIn] = useState({\r\n        _id: null\r\n    })\r\n    const [itemsInCart, setItemsInCart] = useState([])\r\n    const [filteredItems, setFilteredItems] = useState(null)\r\n    const [message, setMessage] = useState(null)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n    \r\n    useEffect(() => {\r\n        getItemsForSale()\r\n            .then(responseData => {\r\n                setItemsForSale(responseData)\r\n            })\r\n        \r\n    },\r\n    [loggedIn, filteredItems])\r\n\r\n    useEffect(() => {\r\n        const currentlyLoggedIn = window.localStorage.getItem(\r\n            \"currentlyLoggedIn\"\r\n        )\r\n        if (currentlyLoggedIn) {\r\n            const user = JSON.parse(currentlyLoggedIn)\r\n            setLoggedIn(user)\r\n            setToken(user.token)\r\n        }\r\n    },\r\n    [])\r\n\r\n    const itemMatch = useRouteMatch(\"/my-items/:id\")\r\n    const individualItem = (itemMatch)\r\n        ? itemsForSale.find(item => {\r\n            return (item._id === itemMatch.params.id)\r\n        })\r\n        : null\r\n    \r\n    const showNotification = (\r\n        notification,\r\n        typeOfNotification=\"message\",\r\n        timeoutDuration=5000\r\n    ) => {\r\n        console.log(typeOfNotification)\r\n        if (typeOfNotification === \"errorMessage\") {\r\n            setErrorMessage(notification)\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            },\r\n            timeoutDuration)\r\n        } else {\r\n            setMessage(notification)\r\n            setTimeout(() => {\r\n                setMessage(null)\r\n            },\r\n            timeoutDuration)\r\n        }\r\n    }\r\n\r\n    const ConditionalLinks = () => {\r\n        if (loggedIn._id) {\r\n            return (\r\n                <span className = \"App-header-links\">\r\n                    \r\n                    <Link to=\"/shop\"> Shop </Link>\r\n                    <Link to=\"/my-items\"> My items </Link>\r\n                    <Link to=\"/account\"> Account </Link>\r\n                    <Link to=\"/\" onClick={() => {\r\n                        window.localStorage.removeItem(\r\n                            \"currentlyLoggedIn\"\r\n                        )\r\n                        setLoggedIn({\r\n                            userName: null,\r\n                            _id: null\r\n                        })\r\n                        setToken(null)\r\n                        showNotification(\"You have logged out.\")\r\n                    }}>\r\n                        Log out\r\n                    </Link>\r\n                    <Link to=\"/shop/cart\">\r\n                        <img\r\n                            src = {cart}\r\n                            alt = \"Cart\"\r\n                            style = {{\r\n                                height: \"32px\",\r\n                                width: \"32px\"\r\n                            }}\r\n                            \r\n                        />\r\n                    </Link>\r\n                </span>\r\n            )\r\n        } else {\r\n            return (\r\n                <span className = \"App-header-links\">\r\n                    \r\n                    <Link to=\"/shop\"> Shop </Link>\r\n                    <Link to=\"/login\"> Log in </Link>\r\n                    <Link to=\"/signup\"> Sign up </Link>\r\n                </span>\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n            \r\n            <header className=\"App-header\">\r\n                <h1> Academic Webshop </h1>\r\n                <Search\r\n                    itemsForSale = {itemsForSale}\r\n                    setFilteredItems = {setFilteredItems}\r\n                />\r\n                <ConditionalLinks />\r\n            </header>\r\n\r\n            <main className=\"App-main\">\r\n                <Switch>\r\n                    <Route path=\"/account\">\r\n                        <Account\r\n                            userid = {loggedIn._id}\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/my-items/:id\">\r\n                        <EditItemForm\r\n                            itemsForSale={itemsForSale}\r\n                            setItemsForSale={setItemsForSale}\r\n                            individualItem={individualItem}\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/my-items\">\r\n                        <MyItems\r\n                            userid = {loggedIn._id}\r\n                            itemsForSale = {itemsForSale}\r\n                            setItemsForSale = {setItemsForSale}\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/shop/cart\">\r\n                        <Cart\r\n                            itemsInCart = {itemsInCart}\r\n                            setItemsInCart = {setItemsInCart}\r\n                            loggedIn = {loggedIn}\r\n                            setItemsForSale = {setItemsForSale}\r\n                            itemsForSale = {itemsForSale}\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/shop\">\r\n                        <ItemList\r\n                            termsAccepted = {termsAccepted}\r\n                            acceptTerms = {acceptTerms}\r\n                            loggedIn = {loggedIn}\r\n                            itemsInCart = {itemsInCart}\r\n                            setItemsInCart = {setItemsInCart}\r\n                            filteredItems = {filteredItems}\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/login\">\r\n                        <LogIn\r\n                            setLoggedIn = {setLoggedIn}\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/signup\">\r\n                        <SignUp\r\n                            showNotification = {showNotification}\r\n                        />\r\n                    </Route>\r\n                    <Route path=\"/\">\r\n                        <LandingPage\r\n                            termsAccepted = {termsAccepted}\r\n                            acceptTerms = {acceptTerms}\r\n                            itemsForSale = {itemsForSale}\r\n                            setLoggedIn = {setLoggedIn}\r\n                            setToken = {setToken}\r\n                            setItemsForSale = {setItemsForSale}\r\n                        />\r\n                    </Route>\r\n                </Switch>\r\n            </main>\r\n\r\n            <footer className = \"App-footer\">\r\n                <Notification\r\n                    message = {message}\r\n                    errorMessage = {errorMessage}\r\n                />\r\n            </footer>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\"\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}